%{
   #include<stdio.h>
   #include<stdlib.h>
   #include<string.h>
%}
%union{
	int     entier;
	float   reel;
	char*   string;
}

%token PARENTESE_OUVRANTE PARENTESE_FERMANTE ACOLADE_OUVRANTE ACOLADE_FERMANTE VRG DEUX_POINTS POINT GUI1 GUI2 CROCHET_OUVRANT CROCHET_FERMANT
%token MC_IMPORT AS NUMPY MATPLOTLIB FOR IN RANGE IF ELSE ELIF WHILE
%token DEF  
%token <string>IDF <entier>VAL_INT <reel>VAL_FLOAT <string>VAL_CHAR <string>VAL_STRING
%token INT FLOAT CHAR BOOL 
%token PLUS MOIN MULTI DIVISION AND OR NOT INF SUP INF_EGALE SUP_EGALE EGALE_EGALE NOT_EGALE EGALE POURCENT 
%token COMM

%left SUP SUP_EGALE EGALE INF_EGALE INF
%left PLUS MOIN
%left MULTI DIVISION
%left AND
%left OR NOT

%right PARENTESE_OUVRANTE PARENTESE_FERMANTE

%%
S: LIST_INS { printf("The program is correct syntactically\n"); YYACCEPT; }
;

INS_DECTYPE: TYPE LIST_IDF
;

TYPE:  
    | INT 
    | FLOAT 
    | BOOL 

LIST_IDF: IDF 
        | IDF CROCHET_OUVRANT VAL_INT CROCHET_FERMANT 
        | IDF VRG LIST_IDF 
        | IDF EGALE VAL_INT
        | IDF EGALE VAL_FLOAT
        | IDF EGALE VAL_CHAR
        | IDF EGALE VAL_INT VRG LIST_IDF
        | IDF EGALE VAL_FLOAT VRG LIST_IDF
        | IDF EGALE VAL_CHAR VRG LIST_IDF 
;

LIST_INS: INS LIST_INS
        | INS
;

INS: IMPORT_STATEMENT 
   | INS_AFF 
   | INS_DECTYPE 
   | INS_IF
   | INS_IF2 
   | INS_FOR_RANGE
   | INS_WHILE
;

IMPORT_STATEMENT: MC_IMPORT LIB AS IDF IMPORT_STATEMENT
		| 
		;
LIB:    NUMPY | MATPLOTLIB

INS_AFF: IDF EGALE EXP1
       | IDF CROCHET_OUVRANT VAL_INT CROCHET_FERMANT EGALE EXP1
       ;

EXP1: EXP1 PLUS EXP2 
    | EXP1 MOIN EXP2 
    | EXP2
;
EXP2: EXP2 MULTI EXP3 
    | EXP3    
;
EXP3: PARENTESE_OUVRANTE EXP1 PARENTESE_FERMANTE 
    | VAL_INT 
    | VAL_FLOAT
    | VAL_CHAR 
    | IDF 
    | IDF CROCHET_OUVRANT VAL_INT CROCHET_FERMANT
;




INS_IF: INS_IF2 ELSE DEUX_POINTS LIST_INS 
;
INS_IF2: INS_IF1 LIST_INS 
;
INS_IF1: IF PARENTESE_OUVRANTE COND PARENTESE_FERMANTE DEUX_POINTS



INS_FOR_RANGE: INS_FOR_RANGE2 LIST_INS 
;

INS_FOR_RANGE2: FOR IDF IN RANGE PARENTESE_OUVRANTE EXP1 VRG EXP1 PARENTESE_FERMANTE DEUX_POINTS 
;



INS_WHILE: INS_WHILE2 LIST_INS 
;
INS_WHILE2: WHILE PARENTESE_OUVRANTE COND PARENTESE_FERMANTE DEUX_POINTS 
;
EXP_B: EXP1 SUP EXP1
     | EXP1 INF EXP1 
     | EXP1 SUP_EGALE EXP1 
     | EXP1 INF_EGALE EXP1 
     | EXP1 EGALE_EGALE EXP1
     | EXP1 NOT_EGALE EXP1
     | VAL_INT 
     | VAL_FLOAT 
     | VAL_CHAR 
     | IDF 
     | IDF CROCHET_OUVRANT VAL_INT CROCHET_FERMANT 
;

COND: COND OR COND1 
    | COND1
;
COND1: COND1 AND COND2 
     | COND2
;

COND2: NOT COND3
     | COND3     
;

COND3: EXP_B 

;


%%


void main(){
    
   yyparse();
   afficher();
}

int yywrap(){

   return 1;
}

int yyerror(char *msg){

  printf("\nErreur Syntaxique");
   return 1;
}
